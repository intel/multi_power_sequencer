# TCL File Generated by Component Editor 18.0
# Tue Oct 30 08:24:30 CDT 2018
# DO NOT MODIFY


# 
# sequencer_vmonregs "Sequencer Monitor" v1.0
#  2018.10.30.08:24:30
# 
# 

# 
# request TCL package from ACDS 16.1
# 
package require -exact qsys 16.1


# 
# module sequencer_vmonregs
# 
set_module_property DESCRIPTION ""
set_module_property NAME sequencer_monitor
set_module_property VERSION 1.0
set_module_property INTERNAL false
set_module_property OPAQUE_ADDRESS_MAP true
set_module_property AUTHOR ""
set_module_property DISPLAY_NAME "Sequencer Monitor"
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property REPORT_TO_TALKBACK false
set_module_property ALLOW_GREYBOX_GENERATION false
set_module_property REPORT_HIERARCHY false
set_module_property VALIDATION_CALLBACK validate 
set_module_property COMPOSITION_CALLBACK compose


# 
# parameters
# 

# Turn off error checking in the "Sequencer Voltage Monitor" and use the error checking
#   from the monitor component.
add_parameter COMPOSED_MONITOR INTEGER 1
set_parameter_property COMPOSED_MONITOR VISIBLE false

add_parameter VRAILS INTEGER 4
set_parameter_property VRAILS DEFAULT_VALUE 4
set_parameter_property VRAILS DISPLAY_NAME "Output Voltage Rails"
set_parameter_property VRAILS DESCRIPTION "The number of output voltage rails being sequenced."
set_parameter_property VRAILS TYPE INTEGER
set_parameter_property VRAILS UNITS None
set_parameter_property VRAILS ALLOWED_RANGES 1:143
set_parameter_property VRAILS HDL_PARAMETER true

add_parameter PG_NUM INTEGER 0
set_parameter_property PG_NUM DEFAULT_VALUE 0
set_parameter_property PG_NUM DISPLAY_NAME "Power Good Inputs"
set_parameter_property PG_NUM DESCRIPTION "The number of power good inputs to be monitored."
set_parameter_property PG_NUM TYPE INTEGER
set_parameter_property PG_NUM UNITS None
set_parameter_property PG_NUM ALLOWED_RANGES 0:143
set_parameter_property PG_NUM HDL_PARAMETER true

# Read the frequency of the input clock (in Hertz)
add_parameter CLOCK_RATE_CLK INTEGER 0
set_parameter_property CLOCK_RATE_CLK DISPLAY_NAME "Component's Clock Frequency"
set_parameter_property CLOCK_RATE_CLK DISPLAY_UNITS "Hz"
set_parameter_property CLOCK_RATE_CLK SYSTEM_INFO {CLOCK_RATE clock}
set_parameter_property CLOCK_RATE_CLK VISIBLE false

# Read the frequency of the input clock (in MHz)
add_parameter DV_CLOCK_RATE_CLK INTEGER 0
set_parameter_property DV_CLOCK_RATE_CLK DISPLAY_NAME "Component's Clock Frequency"
set_parameter_property DV_CLOCK_RATE_CLK DESCRIPTION "Input clock frequency.  This value cannot be calculated when the input clock rate is unknown or unconnected to a clock signal."
set_parameter_property DV_CLOCK_RATE_CLK DISPLAY_UNITS "MHz"
set_parameter_property DV_CLOCK_RATE_CLK DERIVED true

add_parameter PG_DEBOUNCE INTEGER 1
set_parameter_property PG_DEBOUNCE DEFAULT_VALUE 1
set_parameter_property PG_DEBOUNCE DISPLAY_NAME "Power Good Debounce Setting"
set_parameter_property PG_DEBOUNCE DESCRIPTION "The number of clock cycles (2^n) that the PG input signal needs to be stable."
set_parameter_property PG_DEBOUNCE TYPE INTEGER
set_parameter_property PG_DEBOUNCE UNITS None
set_parameter_property PG_DEBOUNCE ALLOWED_RANGES {1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28}
set_parameter_property PG_DEBOUNCE HDL_PARAMETER true

add_parameter DV_PG_DEBOUNCE FLOAT 1
set_parameter_property DV_PG_DEBOUNCE DISPLAY_NAME "Power Good Debounce Interval"
set_parameter_property DV_PG_DEBOUNCE DESCRIPTION "Duration in useconds for which the PG input needs to be stable.  This value cannot be calculated when the input clock rate is unknown or unconnected to a clock signal."
set_parameter_property DV_PG_DEBOUNCE DISPLAY_UNITS "us"
set_parameter_property DV_PG_DEBOUNCE DERIVED true
set_parameter_property DV_PG_DEBOUNCE HDL_PARAMETER false

add_parameter ADC_IFNUM INTEGER 1
set_parameter_property ADC_IFNUM DEFAULT_VALUE 1
set_parameter_property ADC_IFNUM DISPLAY_NAME "ADC Streaming Interfaces"
set_parameter_property ADC_IFNUM DESCRIPTION "The number of Max10 ADCs that are being interfaced to."
set_parameter_property ADC_IFNUM TYPE INTEGER
set_parameter_property ADC_IFNUM UNITS None
set_parameter_property ADC_IFNUM ALLOWED_RANGES {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16}
set_parameter_property ADC_IFNUM HDL_PARAMETER true

# This callback is run every time the ADC Streaming Interfaces setting is changed
proc param_adj_adc_ifs_init { arg } {
    # If no ADC interfaces are used, disable the associated parameters
    if {[get_parameter_value ADC_IFNUM] ne 0} {
      set_parameter_property ADC_VREF ENABLED true
      set_parameter_property ADC_SAMPLES ENABLED true
    } else {
      set_parameter_property ADC_VREF ENABLED false
      set_parameter_property ADC_SAMPLES ENABLED false
    }
}

add_parameter ADC_VREF FLOAT 2.5
set_parameter_property ADC_VREF DISPLAY_NAME "ADC Reference Voltage"
set_parameter_property ADC_VREF DISPLAY_UNITS "V"
set_parameter_property ADC_VREF DESCRIPTION "Exact level for the ADC reference voltage."

add_parameter ADC_SAMPLES INTEGER 5
set_parameter_property ADC_SAMPLES DISPLAY_NAME "ADC Samples to Check"
set_parameter_property ADC_SAMPLES DESCRIPTION "Number of contiguous ADC samples for a given input to check, before declaring a warning or fault (overvoltage, undervoltage, power good, etc.)."
set_parameter_property ADC_SAMPLES ALLOWED_RANGES 1:15

add_parameter FEATURE_LEVEL INTEGER 2
set_parameter_property FEATURE_LEVEL DISPLAY_NAME "Functionality Level"
set_parameter_property FEATURE_LEVEL DESCRIPTION "Functionality Level for the Voltage Monitor.  Reduced functionality will allow for a smaller implementation size."
set_parameter_property FEATURE_LEVEL ALLOWED_RANGES {"0: No Control Interface" "1: Hard-Coded Thresholds" "2: Full-featured"}

add_parameter LOGGING_LEVEL INTEGER 2
set_parameter_property LOGGING_LEVEL DISPLAY_NAME "Error Logging Level"
set_parameter_property LOGGING_LEVEL DESCRIPTION "NVRAM Error logging level.  Reduced functionality will allow for a smaller implementation size."
set_parameter_property LOGGING_LEVEL ALLOWED_RANGES {"0: No Logging" "1: Error Logging; no Black Box" "2: Full logging support"}
set_parameter_update_callback LOGGING_LEVEL param_adj_logging_init

add_parameter LOGGING_ENA INTEGER 0
set_parameter_property LOGGING_ENA DISPLAY_NAME "Power-on Logging Enable"
set_parameter_property LOGGING_ENA DESCRIPTION "NVRAM Error logging enable.  Determines whether logging is enabled by default at initial power-on.  Logging can be dynamically enabled or disabled through the MFR_NV_MASTER_EN command."
set_parameter_property LOGGING_ENA ALLOWED_RANGES {"0: Logs disabled " "1: Error Log enabled; Black Box disabled" "3: Error and Black Box Logs enabled"}

# This callback is run every time the Use Power Groups setting is toggled
proc param_adj_logging_init { arg } {
    # Logging is enabled as an option - provide ability to adjust default setting at power-on
    if {[get_parameter_value LOGGING_LEVEL] ne 0} {
      set_parameter_property LOGGING_ENA ENABLED true
    # Logging is disabled as an option - set LOGGING_ENA to '0'
    } else {
      set_parameter_property LOGGING_ENA ENABLED false
      set_parameter_value LOGGING_ENA 0
    }
}

add_parameter NV_AWIDTH INTEGER 0
set_parameter_property NV_AWIDTH DEFAULT_VALUE 12
set_parameter_property NV_AWIDTH DISPLAY_NAME "Flash Address Width"
set_parameter_property NV_AWIDTH DESCRIPTION "The address width for the Flash interface."
set_parameter_property NV_AWIDTH TYPE INTEGER
set_parameter_property NV_AWIDTH UNITS None
set_parameter_property NV_AWIDTH ALLOWED_RANGES 3:32
set_parameter_property NV_AWIDTH HDL_PARAMETER true

add_parameter RETRY_ATTEMPTS INTEGER 0
set_parameter_property RETRY_ATTEMPTS DISPLAY_NAME "Retry Attempts"
set_parameter_property RETRY_ATTEMPTS DESCRIPTION "The number of attempts the sequencer should make to come up, after detecting an error condition."
set_parameter_property RETRY_ATTEMPTS ALLOWED_RANGES {0 1 2 3 4 5 6 "7: Infinite"}

add_parameter RETRY_TIMEOUT INTEGER 0
set_parameter_property RETRY_TIMEOUT DISPLAY_NAME "Timeout Interval on Retry"
set_parameter_property RETRY_TIMEOUT DESCRIPTION "The delay interval that the sequencer will wait between retries."
set_parameter_property RETRY_TIMEOUT ALLOWED_RANGES {"0: No Delay" "1: Use Delay Specified by the Sequencer"}
set_parameter_property RETRY_TIMEOUT DISPLAY_HINT RADIO

add_parameter T_REQUIRE_WE_FOR_CLR BOOLEAN false
set_parameter_property T_REQUIRE_WE_FOR_CLR DISPLAY_NAME "Require 'Write Byte' for CLEAR_FAULTS"
set_parameter_property T_REQUIRE_WE_FOR_CLR DESCRIPTION "Change PMBus command from default of 'Send Byte' to 'Write Byte'.  This is useful for non-PMBus implementations, such as I2C or any other Avalon-MM interface, to prevent unintentional clears."
add_parameter REQUIRE_WE_FOR_CLR INTEGER 1
set_parameter_property REQUIRE_WE_FOR_CLR TYPE INTEGER
set_parameter_property REQUIRE_WE_FOR_CLR DERIVED true
set_parameter_property REQUIRE_WE_FOR_CLR HDL_PARAMETER true
set_parameter_property REQUIRE_WE_FOR_CLR VISIBLE false

# Parameters relating to the VIN output rail
add_display_item "" "Voltage Rail Settings" GROUP
add_display_item "Voltage Rail Settings" "Channel Decoder" GROUP TAB
add_display_item "Channel Decoder" id1 text "<html><dl>
<dt>ADC Interface Number/PG:</dt>
<dd>Indicates which Avalon-ST ADC interface is transmitting the voltage level for the specified VOUT rail, or <br>
whether the Power Good (PG) will be used to monitor a given VOUT rail.<br/><br/></dd>
<dt>ADC/PG Channel:</dt>
<dd>Defines which physical ADC channel (ADC0 - ADC16), or Power Good (PG) input should be mapped to VOUT.</dd>
</dl>"
add_display_item "Channel Decoder" VIN_ADC_IFNUM PARAMETER
add_display_item "Channel Decoder" VIN_ADC_CHANNEL PARAMETER
add_display_item "Channel Decoder" id2 text "<html><dl></dl>"

# Parameters relating to the VIN input rails
add_parameter VIN_ADC_IFNUM STRING PG_Input
set_parameter_property VIN_ADC_IFNUM DISPLAY_NAME "ADC Interface/PG for VIN"
set_parameter_property VIN_ADC_IFNUM DESCRIPTION "Indicates which Avalon-ST ADC interface is transmitting the voltage level for the VIN rail, or whether the Power Good (PG) will be used to monitor VIN."
set_parameter_property VIN_ADC_IFNUM ALLOWED_RANGES {PG_Input}

add_parameter VIN_ADC_CHANNEL INTEGER 0
set_parameter_property VIN_ADC_CHANNEL DISPLAY_NAME "ADC/PG Channel for VIN"
set_parameter_property VIN_ADC_CHANNEL DESCRIPTION "Defines which physical ADC channel (ADC0 - ADC16), or Power Good (PG) input should be mapped to VIN."
set_parameter_property VIN_ADC_CHANNEL ALLOWED_RANGES 0:143

add_parameter VOUT_NAME STRING_LIST
set_parameter_property VOUT_NAME DISPLAY_NAME "Voltage Rail"
set_parameter_property VOUT_NAME AFFECTS_ELABORATION true
set_parameter_property VOUT_NAME HDL_PARAMETER false
set_parameter_property VOUT_NAME DERIVED true
set_parameter_property VOUT_NAME DISPLAY_HINT FIXED_SIZE
set_parameter_property VOUT_NAME DISPLAY_HINT WIDTH:100

# Initialize the table of entries for ADC Interface Number/PG and ADC/PG Channel
set adc_if_list_init ""
set adc_ch_list_init ""
for { set i 0 } { $i < 143 } { incr i } {   
  lappend adc_if_list_init "PG_Input"
  lappend adc_ch_list_init "0"
}
add_parameter ADC_CHANNEL_IFNUM STRING_LIST $adc_if_list_init
set_parameter_property ADC_CHANNEL_IFNUM DEFAULT_VALUE $adc_if_list_init
set_parameter_property ADC_CHANNEL_IFNUM DISPLAY_NAME "ADC Interface Number/PG"
set_parameter_property ADC_CHANNEL_IFNUM ALLOWED_RANGES {PG_Input}
set_parameter_property ADC_CHANNEL_IFNUM DISPLAY_HINT FIXED_SIZE
set_parameter_property ADC_CHANNEL_IFNUM DISPLAY_HINT WIDTH:150

add_parameter ADC_CHANNEL_VOUTNUM INTEGER_LIST $adc_ch_list_init
set_parameter_property ADC_CHANNEL_VOUTNUM DEFAULT_VALUE $adc_ch_list_init
set_parameter_property ADC_CHANNEL_VOUTNUM DISPLAY_NAME "ADC/PG Channel"
set_parameter_property ADC_CHANNEL_VOUTNUM ALLOWED_RANGES 0:143
set_parameter_property ADC_CHANNEL_VOUTNUM DISPLAY_HINT FIXED_SIZE
set_parameter_property ADC_CHANNEL_VOUTNUM DISPLAY_HINT WIDTH:100

add_display_item "Channel Decoder" "VOUT Channel Mapping" GROUP

add_display_item "VOUT Channel Mapping" myTable GROUP TABLE
add_display_item myTable VOUT_NAME PARAMETER
add_display_item myTable ADC_CHANNEL_IFNUM PARAMETER
add_display_item myTable ADC_CHANNEL_VOUTNUM PARAMETER

# Parameters relating to the VIN input
add_display_item "Voltage Rail Settings" "Voltage Monitor Settings" GROUP TAB
add_display_item "Voltage Monitor Settings" "VIN" GROUP TAB
add_parameter VIN_TYP FLOAT 1.5
set_parameter_property VIN_TYP DISPLAY_NAME "VIN Typical Voltage, Monitored"
set_parameter_property VIN_TYP DISPLAY_UNITS "V"
set_parameter_property VIN_TYP DESCRIPTION "VIN Typical Voltage, as monitored by the ADC (V)."
add_parameter VIN_OVF FLOAT 107.0
set_parameter_property VIN_OVF DISPLAY_NAME "VIN Overvoltage Fault"
set_parameter_property VIN_OVF DISPLAY_UNITS "%"
set_parameter_property VIN_OVF DESCRIPTION "VIN Overvoltage Fault, measured as a percentage of the typical voltage."
add_parameter DV_VIN_OVF FLOAT 0.0
set_parameter_property DV_VIN_OVF DISPLAY_NAME "Derived Overvoltage Fault"
set_parameter_property DV_VIN_OVF DISPLAY_UNITS "V"
set_parameter_property DV_VIN_OVF DERIVED true
add_parameter VIN_OVW FLOAT 105.0
set_parameter_property VIN_OVW DISPLAY_NAME "VIN Overvoltage Warning"
set_parameter_property VIN_OVW DISPLAY_UNITS "%"
set_parameter_property VIN_OVW DESCRIPTION "VIN Overvoltage Warning, measured as a percentage of the typical voltage."
add_parameter DV_VIN_OVW FLOAT 0.0
set_parameter_property DV_VIN_OVW DISPLAY_NAME "Derived Overvoltage Warning"
set_parameter_property DV_VIN_OVW DISPLAY_UNITS "V"
set_parameter_property DV_VIN_OVW DERIVED true
add_parameter VIN_UVW FLOAT 97.0
set_parameter_property VIN_UVW DISPLAY_NAME "VIN Undervoltage Warning"
set_parameter_property VIN_UVW DISPLAY_UNITS "%"
set_parameter_property VIN_UVW DESCRIPTION "VIN Undervoltage Warning, measured as a percentage of the typical voltage."
add_parameter DV_VIN_UVW FLOAT 0.0
set_parameter_property DV_VIN_UVW DISPLAY_NAME "Derived Undervoltage Warning"
set_parameter_property DV_VIN_UVW DISPLAY_UNITS "V"
set_parameter_property DV_VIN_UVW DERIVED true
add_parameter VIN_ON FLOAT 95.0
set_parameter_property VIN_ON DISPLAY_NAME "VIN ON Level"
set_parameter_property VIN_ON DISPLAY_UNITS "%"
set_parameter_property VIN_ON DESCRIPTION "VIN ON Level, measured as a percentage of the typical voltage."
add_parameter DV_VIN_ON FLOAT 0.0
set_parameter_property DV_VIN_ON DISPLAY_NAME "Derived VIN ON Level"
set_parameter_property DV_VIN_ON DISPLAY_UNITS "V"
set_parameter_property DV_VIN_ON DERIVED true
add_parameter VIN_UVF FLOAT 93.0
set_parameter_property VIN_UVF DISPLAY_NAME "VIN Undervoltage Fault"
set_parameter_property VIN_UVF DISPLAY_UNITS "%"
set_parameter_property VIN_UVF DESCRIPTION "VIN Undervoltage Fault, measured as a percentage of the typical voltage."
add_parameter DV_VIN_UVF FLOAT 0.0
set_parameter_property DV_VIN_UVF DISPLAY_NAME "Derived Undervoltage Fault"
set_parameter_property DV_VIN_UVF DISPLAY_UNITS "V"
set_parameter_property DV_VIN_UVF DERIVED true
add_parameter VIN_OFF FLOAT 90.0
set_parameter_property VIN_OFF DISPLAY_NAME "VIN OFF Level"
set_parameter_property VIN_OFF DISPLAY_UNITS "%"
set_parameter_property VIN_OFF DESCRIPTION "VIN OFF Level, measured as a percentage of the typical voltage."
add_parameter DV_VIN_OFF FLOAT 0.0
set_parameter_property DV_VIN_OFF DISPLAY_NAME "Derived VIN OFF Level"
set_parameter_property DV_VIN_OFF DISPLAY_UNITS "V"
set_parameter_property DV_VIN_OFF DERIVED true
add_parameter VIN_OVRSP BOOLEAN true
set_parameter_property  VIN_OVRSP   DISPLAY_NAME   "Overvoltage Faults cause controlled sequence down"
set_parameter_property  VIN_OVRSP   DESCRIPTION    "When enabled, the sequencer sequences all rails down in the presence of an overvoltage fault."
add_parameter VIN_UVRSP BOOLEAN true
set_parameter_property  VIN_UVRSP   DISPLAY_NAME   "Undervoltage Faults cause controlled sequence down"
set_parameter_property  VIN_UVRSP   DESCRIPTION    "When enabled, the sequencer sequences all rails down in the presence of an undervoltage fault."
add_display_item "VIN" VIN_TYP PARAMETER
add_display_item "VIN" VIN_OVF PARAMETER
add_display_item "VIN" VIN_OVW PARAMETER
add_display_item "VIN" VIN_UVW PARAMETER
add_display_item "VIN" VIN_ON  PARAMETER
add_display_item "VIN" VIN_UVF PARAMETER
add_display_item "VIN" VIN_OFF PARAMETER
add_display_item "VIN" VIN_OVRSP PARAMETER
add_display_item "VIN" VIN_UVRSP PARAMETER
add_display_item "VIN" "Derived Thresholds VIN" GROUP
add_display_item "Derived Thresholds VIN" DV_VIN_OVF PARAMETER
add_display_item "Derived Thresholds VIN" DV_VIN_OVW PARAMETER
add_display_item "Derived Thresholds VIN" DV_VIN_UVW PARAMETER
add_display_item "Derived Thresholds VIN" DV_VIN_ON  PARAMETER
add_display_item "Derived Thresholds VIN" DV_VIN_UVF PARAMETER
add_display_item "Derived Thresholds VIN" DV_VIN_OFF PARAMETER

# Parameters relating to the VOUT output rails - loop through the maximum number of rails and create a tab for each one
#   Unused tabs will be hidden, based upon the number of output rails the user creates above, via elaboration callback
for { set idx 0 } { $idx < 143 } { incr idx } {
  add_display_item "Voltage Monitor Settings" "VOUT${idx}" GROUP TAB
  add_parameter VOUT${idx}_TYP FLOAT 1.5
  set_parameter_property VOUT${idx}_TYP DISPLAY_NAME "VOUT${idx} Typical Voltage, Monitored"
  set_parameter_property VOUT${idx}_TYP DISPLAY_UNITS "V"
  set_parameter_property VOUT${idx}_TYP DESCRIPTION "VOUT${idx} Typical Voltage, as monitored by the ADC (V)."
  add_parameter VOUT${idx}_OVF FLOAT 107.0
  set_parameter_property VOUT${idx}_OVF DISPLAY_NAME "VOUT${idx} Overvoltage Fault"
  set_parameter_property VOUT${idx}_OVF DISPLAY_UNITS "%"
  set_parameter_property VOUT${idx}_OVF DESCRIPTION "VOUT${idx} Overvoltage Fault, measured as a percentage of the typical voltage."
  add_parameter DV_VOUT${idx}_OVF FLOAT 0.0
  set_parameter_property DV_VOUT${idx}_OVF DISPLAY_NAME "Derived Overvoltage Fault"
  set_parameter_property DV_VOUT${idx}_OVF DISPLAY_UNITS "V"
  set_parameter_property DV_VOUT${idx}_OVF DERIVED true
  add_parameter VOUT${idx}_OVW FLOAT 105.0
  set_parameter_property VOUT${idx}_OVW DISPLAY_NAME "VOUT${idx} Overvoltage Warning"
  set_parameter_property VOUT${idx}_OVW DISPLAY_UNITS "%"
  set_parameter_property VOUT${idx}_OVW DESCRIPTION "VOUT${idx} Overvoltage Warning, measured as a percentage of the typical voltage."
  add_parameter DV_VOUT${idx}_OVW FLOAT 0.0
  set_parameter_property DV_VOUT${idx}_OVW DISPLAY_NAME "Derived Overvoltage Warning"
  set_parameter_property DV_VOUT${idx}_OVW DISPLAY_UNITS "V"
  set_parameter_property DV_VOUT${idx}_OVW DERIVED true
  add_parameter VOUT${idx}_UVW FLOAT 97.0
  set_parameter_property VOUT${idx}_UVW DISPLAY_NAME "VOUT${idx} Undervoltage Warning"
  set_parameter_property VOUT${idx}_UVW DISPLAY_UNITS "%"
  set_parameter_property VOUT${idx}_UVW DESCRIPTION "VOUT${idx} Undervoltage Warning, measured as a percentage of the typical voltage."
  add_parameter DV_VOUT${idx}_UVW FLOAT 0.0
  set_parameter_property DV_VOUT${idx}_UVW DISPLAY_NAME "Derived Undervoltage Warning"
  set_parameter_property DV_VOUT${idx}_UVW DISPLAY_UNITS "V"
  set_parameter_property DV_VOUT${idx}_UVW DERIVED true
  add_parameter VOUT${idx}_ON FLOAT 95.0
  set_parameter_property VOUT${idx}_ON DISPLAY_NAME "VOUT${idx} Power Good Assertion Level"
  set_parameter_property VOUT${idx}_ON DISPLAY_UNITS "%"
  set_parameter_property VOUT${idx}_ON DESCRIPTION "Level for VOUT${idx} at which Power Good should be asserted, measured as a percentage of the typical voltage."
  add_parameter DV_VOUT${idx}_ON FLOAT 0.0
  set_parameter_property DV_VOUT${idx}_ON DISPLAY_NAME "Derived VOUT${idx} ON Level"
  set_parameter_property DV_VOUT${idx}_ON DISPLAY_UNITS "V"
  set_parameter_property DV_VOUT${idx}_ON DERIVED true
  add_parameter VOUT${idx}_UVF FLOAT 93.0
  set_parameter_property VOUT${idx}_UVF DISPLAY_NAME "VOUT${idx} Undervoltage Fault"
  set_parameter_property VOUT${idx}_UVF DISPLAY_UNITS "%"
  set_parameter_property VOUT${idx}_UVF DESCRIPTION "VOUT${idx} Undervoltage Fault, measured as a percentage of the typical voltage."
  add_parameter DV_VOUT${idx}_UVF FLOAT 0.0
  set_parameter_property DV_VOUT${idx}_UVF DISPLAY_NAME "Derived Undervoltage Fault"
  set_parameter_property DV_VOUT${idx}_UVF DISPLAY_UNITS "V"
  set_parameter_property DV_VOUT${idx}_UVF DERIVED true
  add_parameter VOUT${idx}_OFF FLOAT 90.0
  set_parameter_property VOUT${idx}_OFF DISPLAY_NAME "VOUT${idx} Power Good Deassertion Level"
  set_parameter_property VOUT${idx}_OFF DISPLAY_UNITS "%"
  set_parameter_property VOUT${idx}_OFF DESCRIPTION "Level for VOUT${idx} at which Power Good should be deasserted, measured as a percentage of the typical voltage."
  add_parameter DV_VOUT${idx}_OFF FLOAT 0.0
  set_parameter_property DV_VOUT${idx}_OFF DISPLAY_NAME "Derived VOUT${idx} OFF Level"
  set_parameter_property DV_VOUT${idx}_OFF DISPLAY_UNITS "V"
  set_parameter_property DV_VOUT${idx}_OFF DERIVED true
  add_parameter VOUT${idx}_OVRSP BOOLEAN true
  set_parameter_property  VOUT${idx}_OVRSP   DISPLAY_NAME   "Overvoltage Faults cause controlled sequence down"
  set_parameter_property  VOUT${idx}_OVRSP   DESCRIPTION    "When enabled, the sequencer sequences all rails down in the presence of an overvoltage fault."
  add_parameter VOUT${idx}_UVRSP BOOLEAN true
  set_parameter_property  VOUT${idx}_UVRSP   DISPLAY_NAME   "Undervoltage Faults cause controlled sequence down"
  set_parameter_property  VOUT${idx}_UVRSP   DESCRIPTION    "When enabled, the sequencer sequences all rails down in the presence of an undervoltage fault."
  add_display_item "VOUT${idx}" VOUT${idx}_TYP PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_OVF PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_OVW PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_UVW PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_ON  PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_UVF PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_OFF PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_OVRSP PARAMETER
  add_display_item "VOUT${idx}" VOUT${idx}_UVRSP PARAMETER
  add_display_item "VOUT${idx}" "Derived Thresholds VOUT${idx}" GROUP
  add_display_item "Derived Thresholds VOUT${idx}" DV_VOUT${idx}_OVF PARAMETER
  add_display_item "Derived Thresholds VOUT${idx}" DV_VOUT${idx}_OVW PARAMETER
  add_display_item "Derived Thresholds VOUT${idx}" DV_VOUT${idx}_UVW PARAMETER
  add_display_item "Derived Thresholds VOUT${idx}" DV_VOUT${idx}_ON  PARAMETER
  add_display_item "Derived Thresholds VOUT${idx}" DV_VOUT${idx}_UVF PARAMETER
  add_display_item "Derived Thresholds VOUT${idx}" DV_VOUT${idx}_OFF PARAMETER
}


# +----------------------------------------------------------------------------
# | Propagate the parameters of current instance to the lower level instances
# +----------------------------------------------------------------------------
proc propagate_params {instance} {
   foreach param_name [get_instance_parameters $instance] {
      set_instance_parameter_value $instance $param_name [get_parameter_value $param_name]
   }
}


# +----------------------------------------------------------------------------
# | Export interfaces to the top-level
# +----------------------------------------------------------------------------
proc set_export_interface { interface type dir instance inst_interface enable} {
   if {$enable == 1} {
      add_interface           $interface            $type     $dir
      set_interface_property  $interface  EXPORT_OF $instance.$inst_interface
      set_interface_property  $interface  PORT_NAME_MAP "$interface $inst_interface"
   }
}

# +----------------------------------------------------------------------------
# | Composition callback
# +----------------------------------------------------------------------------
proc compose {} {
  # Instantiate various components to the system
  add_instance U_VM_Bridge_Clk altera_clock_bridge
  add_instance U_VM_Bridge_Reset altera_reset_bridge
  add_instance U_VM_Decode sequencer_vmondecode
  add_instance U_VM_Regs sequencer_vmonregs

  # Set parameters for components and propagate matching parameters to downstream components
  set_instance_parameter_value U_VM_Bridge_Reset SYNCHRONOUS_EDGES none
 	propagate_params          	U_VM_Decode
 	propagate_params          	U_VM_Regs

  # Export external interfaces
  set_export_interface clock  	clock   sink   U_VM_Bridge_Clk   in_clk      1
  set_export_interface reset  	reset   sink   U_VM_Bridge_Reset   in_reset      1
  set_export_interface pg_input  	conduit   end   U_VM_Decode   pg_input      [expr {[get_parameter_value "PG_NUM"] ne 0}]
  for { set idx_adc 0 } { $idx_adc <= [get_parameter_value "ADC_IFNUM"] } { incr idx_adc } {
    set_export_interface adc_in${idx_adc}  	avalon_streaming   sink   U_VM_Decode   adc_in${idx_adc}      [expr {[get_parameter_value "ADC_IFNUM"] > ${idx_adc}}]
  }
  set_export_interface avs       avalon  slave  U_VM_Regs  avs		[expr {[get_parameter_value "FEATURE_LEVEL"] ne 0}]
  set_export_interface sequencer_monitor  	conduit   end   U_VM_Regs   sequencer_monitor      1
  set_export_interface smb_alertn  	conduit   end   U_VM_Regs   smb_alertn      1
  set_export_interface flash_data       avalon  master  U_VM_Regs  flash_data		[expr {[get_parameter_value "LOGGING_LEVEL"] ne 0}]
  set_export_interface nvlog_conduit  	conduit   end   U_VM_Regs   nvlog_conduit      [expr {[get_parameter_value "LOGGING_LEVEL"] ne 0}]

  # Create internal connections between instantiated components
  add_connection U_VM_Bridge_Clk.out_clk U_VM_Decode.clock
  add_connection U_VM_Bridge_Clk.out_clk U_VM_Regs.clock
  add_connection U_VM_Bridge_Reset.out_reset U_VM_Decode.reset
  add_connection U_VM_Bridge_Reset.out_reset U_VM_Regs.reset
  add_connection U_VM_Decode.vmon_conduit U_VM_Regs.vmon_conduit
}


# +----------------------------------------------------------------------------
# | Validation callback
# +----------------------------------------------------------------------------
proc validate {} {

  # If no ADC interfaces are used, disable the associated parameters
  if {[get_parameter_value ADC_IFNUM] ne 0} {
    set_parameter_property ADC_VREF ENABLED true
    set_parameter_property ADC_SAMPLES ENABLED true
  } else {
    set_parameter_property ADC_VREF ENABLED false
    set_parameter_property ADC_SAMPLES ENABLED false
  }

  # Logging is enabled as an option - provide ability to adjust default setting at power-on
  if {[get_parameter_value LOGGING_LEVEL] ne 0} {
    set_parameter_property LOGGING_ENA ENABLED true
  # Logging is disabled as an option - set LOGGING_ENA to '0'
  } else {
    set_parameter_property LOGGING_ENA ENABLED false
  }
    
  set ifnum [get_parameter_value ADC_IFNUM]
  set pgnum [get_parameter_value PG_NUM]

  #+---------------------------------------------------------------------------
  # Check for duplicate entries in the table
  set max_chan [expr ($pgnum > 16) ? $pgnum : 16]
  for { set idx_ifs 0 } { $idx_ifs <= $ifnum } { incr idx_ifs } {
    for { set idx_chs 0 } { $idx_chs <= $max_chan } { incr idx_chs } {
      set chk_if($idx_ifs,$idx_chs) 0
    }
  }
  set idx_ifs [ get_parameter_value VIN_ADC_IFNUM ]
  set idx_chs [ get_parameter_value VIN_ADC_CHANNEL ]
  if { $idx_ifs == "PG_Input" } { 
    if { ($idx_chs > $pgnum) } {
      send_message {error} "Specified PG Input bit $idx_chs is higher than the number of PG Inputs ($pgnum)!!!"
    }
    set chk_if(0,$idx_chs) 1
  } else {
    if { ($idx_chs > 16) } {
      send_message {error} "Specified ADC Channel $idx_chs is not valid!!!"
    }
    set chk_if($idx_ifs,$idx_chs) 1
  }  
  # Loop through the channels of the ADC Interfaces, mapping the correct VOUT rails to the channels
  for { set idx_vout 0 } { $idx_vout < [ get_parameter_value VRAILS ] } { incr idx_vout } {
    set idx_ifs [ lindex [ get_parameter_value ADC_CHANNEL_IFNUM ] $idx_vout ]
    set idx_chs [ lindex [ get_parameter_value ADC_CHANNEL_VOUTNUM ] $idx_vout ]
    if { $idx_ifs == "PG_Input" } {
      if { ($idx_chs > $pgnum) } {
        send_message {error} "Specified PG Input bit $idx_chs is higher than the number of PG Inputs ($pgnum)!!!"
      } else {
        if { $chk_if(0,$idx_chs) == 1 } {
          send_message {warning} "PG Input bit $idx_chs is used for multiple rails!!!"
        } else {
          set chk_if(0,$idx_chs) 1
        }
      }
    } else {
      if { $idx_ifs > $ifnum } {
        send_message {error} "Specified ADC Interface $idx_ifs is not valid!!!"
      } else {
        if { ($idx_chs > 16) } {
          send_message {error} "Specified ADC Channel $idx_chs is not valid!!!"
        } else {
          if { $chk_if($idx_ifs,$idx_chs) == 1 } {
            send_message {warning} "ADC Interface $idx_ifs channel $idx_chs is used for multiple rails!!!"
          } else {
            set chk_if($idx_ifs,$idx_chs) 1
          }
        }
      }
    }
  }
  #+---------------------------------------------------------------------------

  #+---------------------------------------------------------------------------
  # Optionally enable the Power Good (PG) interface
  if {[get_parameter_value PG_NUM] > "0" } {
    # Make the PG parameters visible
    set_parameter_property DV_CLOCK_RATE_CLK VISIBLE true
    set_parameter_property PG_DEBOUNCE VISIBLE true
    set_parameter_property DV_PG_DEBOUNCE VISIBLE true
  } else {
    # Make the PG parameters invisible
    set_parameter_property DV_CLOCK_RATE_CLK VISIBLE false
    set_parameter_property PG_DEBOUNCE VISIBLE false
    set_parameter_property DV_PG_DEBOUNCE VISIBLE false
  }
  #+---------------------------------------------------------------------------

#  #+---------------------------------------------------------------------------
#  # Create the ADC interface
#  #   Note: This is done by fracturing a single vector set into multiple 
#  #   interfaces, each of which can be connected to an ADC AVST interface.
#  #   This is to work around the limitation of no SV support in Qsys Std, and
#  #   no multi-dimensional array support for ports in Verilog.
  set adc_channel_list "PG_Input"
  for { set s 0 } { $s < $ifnum } { incr s } {
    set ch_hi [expr ${s}*5+4]
    set ch_lo [expr ${s}*5]
    set data_hi [expr ${s}*12+11]
    set data_lo [expr ${s}*12]
    lappend adc_channel_list "[expr $s+1]"
  }
  set_parameter_property VIN_ADC_IFNUM ALLOWED_RANGES $adc_channel_list
  set_parameter_property ADC_CHANNEL_IFNUM ALLOWED_RANGES $adc_channel_list
  ## FIX UI VOUT name and #
  set vout_list ""
  for { set out 0 } { $out < [ get_parameter_value VRAILS ] } { incr out } {   
      lappend vout_list "VOUT$out"
  }    
  set_parameter_value VOUT_NAME $vout_list
  #+---------------------------------------------------------------------------

  # Dynamically resize the table, based on the number of user-entered VOUT rails
  set_display_item_property myTable DISPLAY_HINT ROWS:[ get_parameter_value VRAILS ]
  set_display_item_property myTable DISPLAY_HINT COLUMNS:3
  set P_CLOCK_RATE_CLK          [expr ([ get_parameter_value CLOCK_RATE_CLK ] / 1000000)]
  set_parameter_value  DV_CLOCK_RATE_CLK $P_CLOCK_RATE_CLK
  set_parameter_value  DV_PG_DEBOUNCE [expr (pow(2,[ get_parameter_value PG_DEBOUNCE ])-1)/$P_CLOCK_RATE_CLK]
  
  set P_ADC_VREF   [get_parameter_value ADC_VREF]
  # Optionally enable the Retry Timeout
  if {[get_parameter_value RETRY_ATTEMPTS] > 0 } {
    # Make the RETRY_TIMEOUT parameter visible
    set_parameter_property RETRY_TIMEOUT VISIBLE true
  } else {
    # Make the PG parameters invisible
    set_parameter_property RETRY_TIMEOUT VISIBLE false
  }
  if {[ get_parameter_value T_REQUIRE_WE_FOR_CLR ] } {
    set_parameter_value REQUIRE_WE_FOR_CLR 1
  } else {
    set_parameter_value REQUIRE_WE_FOR_CLR 0
  }
  if {[ get_parameter_value VIN_ADC_IFNUM ] ne "PG_Input"} {
    # Calculate the derived voltage thresholds for informational purposes, back to the GUI
    set P_VIN_OVF [format "%.3f" [expr [get_parameter_value VIN_OVF] * [get_parameter_value VIN_TYP] / 100 ]]
    set_parameter_value DV_VIN_OVF $P_VIN_OVF
    if { $P_VIN_OVF > $P_ADC_VREF } {
      send_message {warning} "VIN Overvoltage fault threshold exceeds VREF_ADC!!!"
    }
    set P_VIN_OVW [format "%.3f" [expr [get_parameter_value VIN_OVW] * [get_parameter_value VIN_TYP] / 100 ]]
    set_parameter_value DV_VIN_OVW $P_VIN_OVW
    if { $P_VIN_OVW > $P_ADC_VREF } {
      send_message {warning} "VIN Overvoltage warning threshold exceeds VREF_ADC!!!"
    }
    set P_VIN_UVW [format "%.3f" [expr [get_parameter_value VIN_UVW] * [get_parameter_value VIN_TYP] / 100 ]]
    set_parameter_value DV_VIN_UVW $P_VIN_UVW
    if { $P_VIN_UVW > $P_ADC_VREF } {
      send_message {warning} "VIN Undervoltage fault threshold exceeds VREF_ADC!!!"
    }
    set P_VIN_ON  [format "%.3f" [expr [get_parameter_value VIN_ON ] * [get_parameter_value VIN_TYP] / 100 ]]
    set_parameter_value DV_VIN_ON  $P_VIN_ON
    if { $P_VIN_ON > $P_ADC_VREF } {
      send_message {warning} "VIN On threshold exceeds VREF_ADC!!!"
    }
    set P_VIN_UVF [format "%.3f" [expr [get_parameter_value VIN_UVF] * [get_parameter_value VIN_TYP] / 100 ]]
    set_parameter_value DV_VIN_UVF $P_VIN_UVF
    if { $P_VIN_UVF > $P_ADC_VREF } {
      send_message {warning} "VIN Undervoltage fault threshold exceeds VREF_ADC!!!"
    }
    set P_VIN_OFF [format "%.3f" [expr [get_parameter_value VIN_OFF] * [get_parameter_value VIN_TYP] / 100 ]]
    set_parameter_value DV_VIN_OFF $P_VIN_OFF
    if { $P_VIN_OFF > $P_ADC_VREF } {
      send_message {warning} "VIN Off threshold exceeds VREF_ADC!!!"
    }
    set_parameter_property VIN_TYP VISIBLE true
    set_parameter_property VIN_OVF VISIBLE true
    set_parameter_property VIN_OVW VISIBLE true
    set_parameter_property VIN_UVF VISIBLE true
    set_parameter_property VIN_UVW VISIBLE true
    set_parameter_property VIN_ON  VISIBLE true
    set_parameter_property VIN_OFF VISIBLE true
    set_display_item_property "Derived Thresholds VIN" VISIBLE true
  } else {
    set_parameter_property VIN_TYP VISIBLE false
    set_parameter_property VIN_OVF VISIBLE false
    set_parameter_property VIN_OVW VISIBLE false
    set_parameter_property VIN_UVF VISIBLE false
    set_parameter_property VIN_UVW VISIBLE false
    set_parameter_property VIN_ON  VISIBLE false
    set_parameter_property VIN_OFF VISIBLE false
    set_display_item_property "Derived Thresholds VIN" VISIBLE false
  }

  for { set idx 0 } { $idx < 143 } { incr idx } {
    # Display only the rails required for the system - first, disable all tabs
    set_display_item_property "VOUT${idx}" VISIBLE false
    if {$idx < [ get_parameter_value VRAILS ]} {
      # Display only the rails required for the system - next, enable the valid VOUT tabs 
      set_display_item_property "VOUT${idx}" VISIBLE true
      # Is this rail analog?
      if {[ lindex [ get_parameter_value ADC_CHANNEL_IFNUM ] $idx ] ne "PG_Input"} {
        # Calculate the derived voltage thresholds for informational purposes, back to the GUI
        set TEMP_OVF [format "%.3f" [expr [get_parameter_value VOUT${idx}_OVF] * [get_parameter_value VOUT${idx}_TYP] / 100 ]]
        set_parameter_value DV_VOUT${idx}_OVF $TEMP_OVF
        if { $TEMP_OVF > $P_ADC_VREF } {
          send_message {warning} "VOUT${idx} Overvoltage fault threshold exceeds VREF_ADC!!!"
        }
        set TEMP_OVW [format "%.3f" [expr [get_parameter_value VOUT${idx}_OVW] * [get_parameter_value VOUT${idx}_TYP] / 100 ]]
        set_parameter_value DV_VOUT${idx}_OVW $TEMP_OVW
        if { $TEMP_OVW > $P_ADC_VREF } {
          send_message {warning} "VOUT${idx} Overvoltage warning threshold exceeds VREF_ADC!!!"
        }
        set TEMP_UVW [format "%.3f" [expr [get_parameter_value VOUT${idx}_UVW] * [get_parameter_value VOUT${idx}_TYP] / 100 ]]
        set_parameter_value DV_VOUT${idx}_UVW $TEMP_UVW
        if { $TEMP_UVW > $P_ADC_VREF } {
          send_message {warning} "VOUT${idx} Undervoltage threshold warning exceeds VREF_ADC!!!"
        }
        set TEMP_ON  [format "%.3f" [expr [get_parameter_value VOUT${idx}_ON ] * [get_parameter_value VOUT${idx}_TYP] / 100 ]]
        set_parameter_value DV_VOUT${idx}_ON  $TEMP_ON
        if { $TEMP_ON > $P_ADC_VREF } {
          send_message {warning} "VOUT${idx} Power Good assertion threshold exceeds VREF_ADC!!!"
        }
        set TEMP_UVF [format "%.3f" [expr [get_parameter_value VOUT${idx}_UVF] * [get_parameter_value VOUT${idx}_TYP] / 100 ]]
        set_parameter_value DV_VOUT${idx}_UVF $TEMP_UVF
        if { $TEMP_UVF > $P_ADC_VREF } {
          send_message {warning} "VOUT${idx} Undervoltage fault threshold exceeds VREF_ADC!!!"
        }
        set TEMP_OFF [format "%.3f" [expr [get_parameter_value VOUT${idx}_OFF] * [get_parameter_value VOUT${idx}_TYP] / 100 ]]
        set_parameter_value DV_VOUT${idx}_OFF $TEMP_OFF
        if { $TEMP_OFF > $P_ADC_VREF } {
          send_message {warning} "VOUT${idx} Power good deassertion threshold exceeds VREF_ADC!!!"
        }
        set_parameter_property VOUT${idx}_TYP VISIBLE true
        set_parameter_property VOUT${idx}_OVF VISIBLE true
        set_parameter_property VOUT${idx}_OVW VISIBLE true
        set_parameter_property VOUT${idx}_UVF VISIBLE true
        set_parameter_property VOUT${idx}_UVW VISIBLE true
        set_parameter_property VOUT${idx}_ON  VISIBLE true
        set_parameter_property VOUT${idx}_OFF VISIBLE true
        set_display_item_property "Derived Thresholds VOUT${idx}" VISIBLE true
      } else {
        set_parameter_property VOUT${idx}_TYP VISIBLE false
        set_parameter_property VOUT${idx}_OVF VISIBLE false
        set_parameter_property VOUT${idx}_OVW VISIBLE false
        set_parameter_property VOUT${idx}_UVF VISIBLE false
        set_parameter_property VOUT${idx}_UVW VISIBLE false
        set_parameter_property VOUT${idx}_ON  VISIBLE false
        set_parameter_property VOUT${idx}_OFF VISIBLE false
        set_display_item_property "Derived Thresholds VOUT${idx}" VISIBLE false
      }
    }
  }
}
